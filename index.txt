diff --git a/project/src/components/TabView.tsx b/project/src/components/TabView.tsx
index f2b1b30..583318e 100644
--- a/project/src/components/TabView.tsx
+++ b/project/src/components/TabView.tsx
@@ -5,7 +5,6 @@ import {
     TextView,
     Constraint,
     WidgetCollection,
-    StackLayout,
     $
 } from "tabris";
 
@@ -29,111 +28,47 @@ class TabView extends Composite {
         return this._title;
     }
 
-    constructor(
-        props: Properties<Composite> & { title: string; collapse?: boolean }
-    ) {
-        if (!("buttom" in props)) {
-            props.buttom = 0;
-        }
-
+    constructor(props: Properties<Composite> & { title: string }) {
         super({
-            top: 0,
+            top: "prev()",
+            bottom: 0,
             left: 0,
             right: 0,
             ...props
         });
 
-        const excludeLayout = async (displayNone: boolean) => {
-            widgetCollapse.data.display = !displayNone;
-            widgetCollapse.excludeFromLayout = displayNone;
-            if (displayNone && this.data.start) {
-                this.height = "auto";
-            }
-            if (!this.data.start) {
-                this.data.start = true;
-            }
-        };
-
-        const changeHeight = async (parent: any) => {
-            const { height: boundsHeightScroll } = widgetCollapse.bounds;
-            const { height: boundsHeightTab } = this.bounds;
-            const parentHeight = this.parent().bounds.height;
-
-            if (
-                widgetCollapse.data.display
-                //boundsHeightTab !== parentHeight
-            ) {
-                widgetCollapse.data.calculated = true;
-                this.height = parentHeight;
-                widgetCollapse.layoutData = "stretchX";
-                widgetCollapse.height =
-                    parentHeight -
-                    widgetCollapse.siblings().first().bounds.height;
-                console.log(this.height, widgetCollapse.height);
-            }
+        const excludeLayout = (showLayout: boolean) => {
+            scroll.excludeFromLayout = showLayout;
         };
 
-        this.on("boundsChanged", async ({ target, value }: any) => {
-            const parent = this.parent();
-            if (!parent) return;
-            else if (props.bottom !== "auto") return;
-            if (widgetCollapse.data.display === false) return;
-
-            const heightParent = parent.bounds.height;
-            const height = value.height;
-            const heightScroll = widgetCollapse.bounds.height;
-            const heightTv = widgetCollapse.siblings(TextView).first();
-            const dv = heightParent / parent.children().length; //Math.abs(height - heightParent);
-            if (height > heightParent /*|| heightScroll > heightParent*/) {
-                this.height = dv;
-                widgetCollapse.data.childs = widgetCollapse
-                    .children()
-                    .toArray();
-                //widgetCollapse.children().detach();
-                widgetCollapse.bottom = 0;
-            } else {
-                //widgetCollapse.append(widgetCollapse.data.childs);
-                console.log(dv, heightParent, height, heightScroll);
-            }
-            if (
-                widgetCollapse.data.display &&
-                parent.bounds.height === value.height &&
-                widgetCollapse.data.calculated
-                //0 !== widgetCollapse.bounds.height
-            )
-                return;
-            if (widgetCollapse.data.display == false) return;
-            //changeHeight(parent);
-        });
-
         this.append(
             <$>
-                <TextView
-                    left={0}
-                    right={0}
-                    textColor="#6f6f7d"
-                    background="#111827"
+                <Composite
+                    stretchX
                     padding={[5, 10]}
-                    text={this.name.toUpperCase()}
-                    onTap={() =>
-                        excludeLayout(!widgetCollapse.excludeFromLayout)
-                    }
-                />
+                    onTap={() => excludeLayout(!scroll.excludeFromLayout)}
+                    background="#111827"
+                >
+                    <TextView
+                        left={10}
+                        textColor="#6f6f7d"
+                        text={this.name.toUpperCase()}
+                        stretchX
+                    />
+                </Composite>
                 <ScrollView
-                    stretchX
                     top="prev()"
-                    background="green"
-                    class="scrollTabContent widgetCollapse"
+                    bottom={0}
+                    left={0}
+                    right={10}
+                    padding={5}
+                    //id='scrollTabContent'
+                    class="scrollTabContent"
                     scrollbarVisible={false}
-                >
-                    <Composite stretchX></Composite>
-                </ScrollView>
+                />
             </$>
-        ); //.onTap(() => excludeLayout(!scroll.excludeFromLayout));
-        const widgetCollapse = this._find(".scrollTabContent").first();
-        if (props.buttom && props.buttom !== "auto") {
-            widgetCollapse.buttom = 0;
-        }
+        ); //.onTap(()=> excludeLayout(!scroll.excludeFromLayout));
+        const scroll = this._find(".scrollTabContent").only();
         excludeLayout(this.collapse);
     }
 
@@ -142,7 +77,9 @@ class TabView extends Composite {
         if (elms instanceof WidgetCollection && this._children().length === 0) {
             super.append(elms);
         } else {
-            this._find(".scrollTabContent > Composite").only().append(elms);
+            this._find(".scrollTabContent")
+                .only(ScrollView)
+                .append(elms);
         }
         return this;
     }
